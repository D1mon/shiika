# vim: set ft=ruby
<%
  def camel_case(name)
    name.split('_').map(&:capitalize).join
  end

  def repeat1(name, sep: [], suffix: nil)
    <<-EOD
    #{name}s: 
        #{name}
        { [val[0]] }
      | #{name}s #{sep.join ' '} #{name}
        { val[0].push(val[#{sep.length + 1}]) }
    EOD
  end

  # sep: token needed in between the sequence
  # suffix: token needed at the end of the sequence
  def repeat0(name, sep: [], suffix: nil)
    <<-EOD
    opt_#{name}s:
        /* NONE */ 
      { [] }
      | #{name}s #{suffix}
      { val[0] }

    #{repeat1(name, sep: sep)}
    EOD
  end
%>
class Shiika::Parser
  options no_result_var
  token IDENT IDENT_M CONST IVAR FLOAT INTEGER

  prechigh
    right UMINUS
    left '*' '/' '%'
    left '+' '-'
    left '>' '>=' '<' '<='
    nonassoc '==' '!='
    left '&&'
    left '||'
  preclow

rule
    source:
        opt_sep definitions sep top_statements opt_sep
        { Ast::Source.new(defs: val[1], main: Ast::Main.new(stmts: val[3])) }
      | opt_sep definitions opt_sep
        { Ast::Source.new(defs: val[1], main: Ast::Main.new(stmts: [])) }
      | opt_sep top_statements opt_sep
        { Ast::Source.new(defs: [],     main: Ast::Main.new(stmts: val[1])) }
      | opt_sep
        { Ast::Source.new(defs: [],     main: Ast::Main.new(stmts: [])) }

    definition:
        defclass
      | defun
      | assign_const
    <%= repeat1 'definition', sep: ['sep'] %>

    # Almost same as statement but last `sep` is optional
    # (i.e. `sep` is optional at the end of the source file)
    top_statement:
        statement
      | assign_const
    <%= repeat1 'top_statement', sep: ['sep'] %>

    defclass:
        'class' CONST opt_type_parameters sep
          opt_defmethods
        'end'
        { Ast::DefClass.new(name: val[1], typarams: val[2], defmethods: val[4]) }

    opt_type_parameters:
        /* NONE */
        { [] }
      |
        '[' type_parameters ']'
        { val[1] }

    type_parameter:
      CONST
      { Ast::TypeParameter.new(name: val[0]) }
    <%= repeat1 'type_parameter', sep: ["_nl", "','", "_nl"] %>

    defmethod:
        definitialize
      | 'def' opt_self_dot method_name opt_paramlist _nl '->' _nl type sep
           opt_statements
        'end'
        { 
          if val[1] 
            Ast::DefClassMethod.new(name: val[2], params: val[3],
                                    ret_type_spec: val[7], body_stmts: val[9])
          else
            Ast::DefMethod.new(name: val[2], params: val[3],
                               ret_type_spec: val[7], body_stmts: val[9])
          end
        }
    <%= repeat0 'defmethod', sep: ['sep'], suffix: 'sep' %>

    definitialize:
        'def' 'initialize' opt_iparamlist sep
          opt_statements
        'end'
        { Ast::DefInitialize.new(params: val[2], body_stmts: val[4]) }

    opt_iparamlist:
        /* NONE */
        { [] }
      | '(' opt_iparams ')'
        { val[1] }

    iparam: 
        param
      | IVAR ':' type
        { Ast::IParam.new(name: val[0], type_spec: val[2]) }
    <%= repeat0 'iparam', sep: ["_nl", "','", "_nl"] %>

    opt_self_dot:
        /* NONE */
        { false }
      | 'self' '.'
        { true }

    defun:
        'def' method_name opt_paramlist _nl '->' _nl type sep
           opt_statements
        'end'
        { Ast::Defun.new(name: val[1], params: val[2],
                         ret_type_spec: val[6], body_stmts: val[8]) }
    <%= repeat0 'defun', sep: ['sep'] %>

    opt_paramlist:
        /* NONE */
        { [] }
      | '(' opt_params ')'
        { val[1] }

    param: 
        IDENT ':' type
        { Ast::Param.new(name: val[0], type_spec: val[2]) }
    <%= repeat0 'param', sep: ["_nl", "','", "_nl"] %>

    param_type:
        type
        { Ast::Param.new(name: nil, type_spec: val[0]) }
    <%= repeat0 'param_type', sep: ["_nl", "','", "_nl"] %>

    statement:
        return_stmt
      | expression
    <%= repeat0 'statement', sep: ['sep'], suffix: 'sep' %>

    return_stmt:
        'return' expression
        { Ast::Return.new(expr: val[1]) }

    expression:
        if_expr
      | method_call
      | fcall
      | deflvar
      | assign_lvar
      | assign_ivar
      | varref
      | literal

      <% ops = %w(+ - * / % > < >= <= == != && ||) %>
      <% ops.each do |op| %>
      | expression '<%= op %>' expression
        { Ast::BinExpr.new(op: "<%= op %>", left_expr: val[0], right_expr: val[2]) }
      <% end %>

      | '-' expression =UMINUS
        { Ast::UnaryExpr.new(op: "-", expr: val[1]) }

      | '(' expression ')'
        { val[1] }

    if_expr:
        'if' expression sep opt_statements 'end'
        { Ast::If.new(cond_expr: val[1], then_stmts: val[3], else_stmts: []) }
      | 'if' expression sep opt_statements elsif_clause
        { Ast::If.new(cond_expr: val[1], then_stmts: val[3], else_stmts: val[4]) }

    elsif_clause:
        'elsif' expression sep opt_statements elsif_clause
        { [Ast::If.new(cond_expr: val[1], then_stmts: val[3], else_stmts: val[4])] }
      | 'elsif' expression sep opt_statements 'end'
        { [Ast::If.new(cond_expr: val[1], then_stmts: val[3], else_stmts: [])] }
      | 'else' opt_sep opt_statements 'end'
        { val[2] }

    method_call:
        expression '.' method_name opt_arglist
        { Ast::MethodCall.new(receiver_expr: val[0], method_name: val[2], args: val[3]) }
      | expression '.' IDENT '=' expression
        { Ast::MethodCall.new(receiver_expr: val[0], method_name: val[2] + '=', args: [val[4]]) }
      | expression '[' opt_args ']'
        { Ast::MethodCall.new(receiver_expr: val[0], method_name: '[]', args: val[2]) }

    fcall:
        method_name opt_arglist
        { Ast::FunCall.new(name: val[0], args: val[1]) }

    opt_arglist:
        /* NONE */
        { [] }
      | '(' opt_args ')'
        { val[1] }

    arg:
        expression
    <%= repeat0 'arg', sep: ["_nl", "','", "_nl"] %>

    deflvar:
        'var' IDENT '=' expression
        { Ast::AssignLvar.new(varname: val[1], expr: val[3], isvar: true) }

    assign_lvar:
        IDENT '=' expression
        { Ast::AssignLvar.new(varname: val[0], expr: val[2], isvar: false) }

    assign_ivar:
        IVAR '=' expression
        { Ast::AssignIvar.new(varname: val[0], expr: val[2]) }

    assign_const:
        CONST '=' expression
        { Ast::AssignConst.new(varname: val[0], expr: val[2]) }

    varref:
        IDENT
        { Ast::LvarRef.new(name: val[0]) }
      | IVAR
        { Ast::IvarRef.new(name: val[0]) }
      | CONST
        { Ast::ConstRef.new(name: val[0]) }

    literal:
        FLOAT
        { Ast::Literal.new(value: val[0]) }
      | INTEGER
        { Ast::Literal.new(value: val[0]) }
      | 'true'
        { Ast::Literal.new(value: true) }
      | 'false'
        { Ast::Literal.new(value: false) }

    type:
        CONST
        { Type::TyRaw[val[0]] }

    method_name:
        IDENT
      | IDENT_M

    nl:
        '\n'

    _nl:
        /* NONE */
      | nl

    opt_sep:
        /* NONE */
      | sep

    sep:
        separator
      | sep separator

    separator:
        nl
      | ';'
end

---- header
require 'strscan'
require 'shiika/ast'

---- inner
KEYWORDS = /class|def|initialize|do|end|if|elsif|else|return|var|self|true|false/

SYMBOLS = Regexp.union(*"
... >= <= == != && || -> < > ( ) [ ] { } . + - * / % = , ; :
".split.map{|x| Regexp.new(Regexp.quote(x))})

def parse(str)
  @yydebug = true

  @q = []
  s = StringScanner.new(str)
  until s.empty?
    case
    when s.scan(/\n/)
      @q << ['\n', :NL]
    when s.scan(/[ \t]+/)
      # skip whitespace
    when s.scan(%r{#[^\n]*})
      # skip comment
    when m = s.scan(SYMBOLS)
      @q << [m, :SYMBOL]
    when m = s.scan(/\d+\.\d+/)
      @q << [:FLOAT, m.to_f]
    when m = s.scan(/\d+/)
      @q << [:INTEGER, m.to_i]
    when m = s.scan(/#{KEYWORDS}\b/)
      @q << [m, :KEYWORD]
    when m = s.scan(/@[\w_]+/)
      @q << [:IVAR, m]
    when m = s.scan(/[A-Z_][\w_]*\b/)
      @q << [:CONST, m]
    when m = s.scan(/[\w_]+[!?]/)  # names allowed for methods only
      @q << [:IDENT_M, m]
    when m = s.scan(/[\w_]+/)
      @q << [:IDENT, m]
    else
      raise "no match: #{s.inspect}"
    end
  end

  do_parse
rescue 
  #p q: @q
  raise
end

def next_token
  @q.shift
end
