// vim: set ft=rust:
// NOTE: .rs IS AUTO-GENERATED BY .erb
use crate::hir::*;
use crate::stdlib::create_method;

<%
# Macro to define binary operator method
def create_bin_method(sig, body)
    <<-EOD
    create_method("Int", "#{sig}", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = #{body};
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),
    EOD
end
%>

pub fn create_methods() -> Vec<SkMethod> {
    vec![

    <%= create_bin_method(
          "<(other: Int) -> Bool",
          'code_gen.builder.build_int_compare(inkwell::IntPredicate::SLT, val1, val2, "lt")'
    ) %>

    <%= create_bin_method(
          "+(other: Int) -> Int",
          'code_gen.builder.build_int_add(val1, val2, "add")'
    ) %>

    <%= create_bin_method(
          "-(other: Int) -> Int",
          'code_gen.builder.build_int_sub(val1, val2, "sub")'
    ) %>

    <%= create_bin_method(
          "&(other: Int) -> Int",
          'code_gen.builder.build_and(val1, val2, "and")'
    ) %>

    <%= create_bin_method(
          "|(other: Int) -> Int",
          'code_gen.builder.build_or(val1, val2, "or")'
    ) %>

    <%= create_bin_method(
          "^(other: Int) -> Int",
          'code_gen.builder.build_xor(val1, val2, "xor")'
    ) %>

    <%= create_bin_method(
          "<<(other: Int) -> Int",
          'code_gen.builder.build_left_shift(val1, val2, "lshift")'
    ) %>

    <%= create_bin_method(
          ">>(other: Int) -> Int",
          'code_gen.builder.build_right_shift(val1, val2, true, "rshift")'
    ) %>

    create_method("Int", "to_f() -> Float", |code_gen, function| {
        let int = function.get_params()[0].into_int_value();
        let float = code_gen.builder.build_signed_int_to_float(int, code_gen.f64_type, "float");
        code_gen.builder.build_return(Some(&float));
        Ok(())
    }),

    ]
}

