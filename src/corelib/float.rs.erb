// vim: set ft=rust:
// NOTE: .rs IS AUTO-GENERATED BY .erb
use crate::hir::*;
use crate::corelib::create_method;

<%
# Macro to define binary operator method
def create_bin_method(sig, body)
    <<-EOD
    create_method("Float", "#{sig}", |code_gen, function| {
        let val1 = function.get_params()[0].into_float_value();
        let val2 = function.get_params()[1].into_float_value();
        let result = #{body};
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),
    EOD
end
%>

pub fn create_methods() -> Vec<SkMethod> {
    vec![

    <%= create_bin_method(
          "==(other: Float) -> Bool",
          'code_gen.builder.build_float_compare(inkwell::FloatPredicate::OEQ, val1, val2, "eq")'
    ) %>

    <%= create_bin_method(
          "!=(other: Float) -> Bool",
          'code_gen.builder.build_float_compare(inkwell::FloatPredicate::UNE, val1, val2, "neq")'
    ) %>

    <%= create_bin_method(
          "<(other: Float) -> Bool",
          'code_gen.builder.build_float_compare(inkwell::FloatPredicate::OLT, val1, val2, "lt")'
    ) %>

    <%= create_bin_method(
          ">(other: Float) -> Bool",
          'code_gen.builder.build_float_compare(inkwell::FloatPredicate::OGT, val1, val2, "gt")'
    ) %>

    <%= create_bin_method(
          "<=(other: Float) -> Bool",
          'code_gen.builder.build_float_compare(inkwell::FloatPredicate::OLE, val1, val2, "leq")'
    ) %>

    <%= create_bin_method(
          ">=(other: Float) -> Bool",
          'code_gen.builder.build_float_compare(inkwell::FloatPredicate::OGE, val1, val2, "geq")'
    ) %>

    <%= create_bin_method(
          "+(other: Float) -> Float",
          'code_gen.builder.build_float_add(val1, val2, "add")'
    ) %>

    <%= create_bin_method(
          "-(other: Float) -> Float",
          'code_gen.builder.build_float_sub(val1, val2, "sub")'
    ) %>

    <%= create_bin_method(
          "*(other: Float) -> Float",
          'code_gen.builder.build_float_mul(val1, val2, "mul")'
    ) %>

    <%= create_bin_method(
          "/(other: Float) -> Float",
          'code_gen.builder.build_float_div(val1, val2, "div")'
    ) %>

    // TODO: %

    create_method("Float", "abs -> Float", |code_gen, function| {
        let x = function.get_params()[0].into_float_value();
        let func = code_gen.module.get_function("fabs").unwrap();
        let result = code_gen.builder.build_call(func, &[x.into()], "result").try_as_basic_value().left().unwrap();
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),

    create_method("Float", "to_i() -> Int", |code_gen, function| {
        let float = function.get_params()[0].into_float_value();
        let int = code_gen.builder.build_float_to_signed_int(float, code_gen.i32_type, "int");
        code_gen.builder.build_return(Some(&int));
        Ok(())
    }),

    ]
}
